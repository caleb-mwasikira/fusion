// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: lib/proto/fuse.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Fuse_Auth_FullMethodName               = "/Fuse/Auth"
	Fuse_DownloadFile_FullMethodName       = "/Fuse/DownloadFile"
	Fuse_ObserveFileChanges_FullMethodName = "/Fuse/ObserveFileChanges"
	Fuse_Lookup_FullMethodName             = "/Fuse/Lookup"
	Fuse_ReadDirAll_FullMethodName         = "/Fuse/ReadDirAll"
	Fuse_Mkdir_FullMethodName              = "/Fuse/Mkdir"
	Fuse_Rmdir_FullMethodName              = "/Fuse/Rmdir"
	Fuse_Getattr_FullMethodName            = "/Fuse/Getattr"
	Fuse_Create_FullMethodName             = "/Fuse/Create"
	Fuse_Symlink_FullMethodName            = "/Fuse/Symlink"
	Fuse_Link_FullMethodName               = "/Fuse/Link"
	Fuse_ReadAll_FullMethodName            = "/Fuse/ReadAll"
	Fuse_Write_FullMethodName              = "/Fuse/Write"
	Fuse_Rename_FullMethodName             = "/Fuse/Rename"
)

// FuseClient is the client API for Fuse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuseClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	ObserveFileChanges(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileEvent], error)
	// FUSE functions
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*DirEntry, error)
	ReadDirAll(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*ReadDirAllResponse, error)
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*DirEntry, error)
	Rmdir(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Getattr(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*FileAttr, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Symlink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	ReadAll(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*ReadAllResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fuseClient struct {
	cc grpc.ClientConnInterface
}

func NewFuseClient(cc grpc.ClientConnInterface) FuseClient {
	return &fuseClient{cc}
}

func (c *fuseClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Fuse_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Fuse_ServiceDesc.Streams[0], Fuse_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Fuse_DownloadFileClient = grpc.ServerStreamingClient[FileChunk]

func (c *fuseClient) ObserveFileChanges(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Fuse_ServiceDesc.Streams[1], Fuse_ObserveFileChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, FileEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Fuse_ObserveFileChangesClient = grpc.ServerStreamingClient[FileEvent]

func (c *fuseClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*DirEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DirEntry)
	err := c.cc.Invoke(ctx, Fuse_Lookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) ReadDirAll(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*ReadDirAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadDirAllResponse)
	err := c.cc.Invoke(ctx, Fuse_ReadDirAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*DirEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DirEntry)
	err := c.cc.Invoke(ctx, Fuse_Mkdir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Rmdir(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fuse_Rmdir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Getattr(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*FileAttr, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileAttr)
	err := c.cc.Invoke(ctx, Fuse_Getattr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Fuse_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Symlink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, Fuse_Symlink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, Fuse_Link_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) ReadAll(ctx context.Context, in *DirEntry, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAllResponse)
	err := c.cc.Invoke(ctx, Fuse_ReadAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, Fuse_Write_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fuse_Rename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuseServer is the server API for Fuse service.
// All implementations must embed UnimplementedFuseServer
// for forward compatibility.
type FuseServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	DownloadFile(*DownloadRequest, grpc.ServerStreamingServer[FileChunk]) error
	ObserveFileChanges(*emptypb.Empty, grpc.ServerStreamingServer[FileEvent]) error
	// FUSE functions
	Lookup(context.Context, *LookupRequest) (*DirEntry, error)
	ReadDirAll(context.Context, *DirEntry) (*ReadDirAllResponse, error)
	Mkdir(context.Context, *MkdirRequest) (*DirEntry, error)
	Rmdir(context.Context, *DirEntry) (*emptypb.Empty, error)
	Getattr(context.Context, *DirEntry) (*FileAttr, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Symlink(context.Context, *LinkRequest) (*LinkResponse, error)
	Link(context.Context, *LinkRequest) (*LinkResponse, error)
	ReadAll(context.Context, *DirEntry) (*ReadAllResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Rename(context.Context, *RenameRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFuseServer()
}

// UnimplementedFuseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFuseServer struct{}

func (UnimplementedFuseServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedFuseServer) DownloadFile(*DownloadRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFuseServer) ObserveFileChanges(*emptypb.Empty, grpc.ServerStreamingServer[FileEvent]) error {
	return status.Errorf(codes.Unimplemented, "method ObserveFileChanges not implemented")
}
func (UnimplementedFuseServer) Lookup(context.Context, *LookupRequest) (*DirEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedFuseServer) ReadDirAll(context.Context, *DirEntry) (*ReadDirAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDirAll not implemented")
}
func (UnimplementedFuseServer) Mkdir(context.Context, *MkdirRequest) (*DirEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedFuseServer) Rmdir(context.Context, *DirEntry) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rmdir not implemented")
}
func (UnimplementedFuseServer) Getattr(context.Context, *DirEntry) (*FileAttr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getattr not implemented")
}
func (UnimplementedFuseServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFuseServer) Symlink(context.Context, *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Symlink not implemented")
}
func (UnimplementedFuseServer) Link(context.Context, *LinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedFuseServer) ReadAll(context.Context, *DirEntry) (*ReadAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedFuseServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedFuseServer) Rename(context.Context, *RenameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFuseServer) mustEmbedUnimplementedFuseServer() {}
func (UnimplementedFuseServer) testEmbeddedByValue()              {}

// UnsafeFuseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuseServer will
// result in compilation errors.
type UnsafeFuseServer interface {
	mustEmbedUnimplementedFuseServer()
}

func RegisterFuseServer(s grpc.ServiceRegistrar, srv FuseServer) {
	// If the following call pancis, it indicates UnimplementedFuseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Fuse_ServiceDesc, srv)
}

func _Fuse_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FuseServer).DownloadFile(m, &grpc.GenericServerStream[DownloadRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Fuse_DownloadFileServer = grpc.ServerStreamingServer[FileChunk]

func _Fuse_ObserveFileChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FuseServer).ObserveFileChanges(m, &grpc.GenericServerStream[emptypb.Empty, FileEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Fuse_ObserveFileChangesServer = grpc.ServerStreamingServer[FileEvent]

func _Fuse_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_ReadDirAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).ReadDirAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_ReadDirAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).ReadDirAll(ctx, req.(*DirEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Mkdir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Rmdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Rmdir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Rmdir(ctx, req.(*DirEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Getattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Getattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Getattr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Getattr(ctx, req.(*DirEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Symlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Symlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Symlink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Symlink(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Link_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Link(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_ReadAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).ReadAll(ctx, req.(*DirEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fuse_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fuse_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fuse_ServiceDesc is the grpc.ServiceDesc for Fuse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fuse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Fuse",
	HandlerType: (*FuseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Fuse_Auth_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Fuse_Lookup_Handler,
		},
		{
			MethodName: "ReadDirAll",
			Handler:    _Fuse_ReadDirAll_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _Fuse_Mkdir_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _Fuse_Rmdir_Handler,
		},
		{
			MethodName: "Getattr",
			Handler:    _Fuse_Getattr_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Fuse_Create_Handler,
		},
		{
			MethodName: "Symlink",
			Handler:    _Fuse_Symlink_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _Fuse_Link_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _Fuse_ReadAll_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Fuse_Write_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _Fuse_Rename_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _Fuse_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveFileChanges",
			Handler:       _Fuse_ObserveFileChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lib/proto/fuse.proto",
}
